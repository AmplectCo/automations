{
  "createdAt": "2025-08-12T07:11:35.933Z",
  "updatedAt": "2025-09-02T11:21:08.204Z",
  "id": "5d9OfFJK6OG15U8R",
  "name": "Analyze competitors (new)",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "contentType": "raw",
        "body": "={   \"contents\": [     {       \"role\": \"user\",       \"parts\": [         {           \"text\": \"You are an elite, highly experienced marketing strategist specializing in advanced semantic SEO and content intelligence. Your objective is to generate a comprehensive 'Semantic Profile' for a given website URL. This profile will serve as the foundational bedrock for high-performance keyword research and content strategy, ensuring semantic relevance and authority.\\n\\nInstructions & Methodology:\\n\\n1. Deep Semantic Analysis: Conduct a deep analysis of the site's apparent purpose, core content themes, navigation structure, user experience, unique selling propositions (USPs), implied user journeys, and the overall semantic field it occupies.\\n2. Infer User Intent & Audience: Based on the site's content and structure, infer the primary user intents it aims to satisfy and construct detailed target audience personas.\\n3. Identify Key Entities & Relationships: Extract core entities (people, products, services, concepts, organizations, locations) and understand the relationships between them.\\n4. Semantic Clustering & LSI Analysis: Identify broader semantic clusters and latent semantic indexing (LSI) terms that are closely associated with the site's primary topics, even if not explicitly stated as main navigation items.\\n5. Voice & Tone Assessment: Analyze the implicit voice, tone, and authority conveyed by the site's language and presentation.\\n6. Actionable Gaps & Opportunities: Identify potential semantic gaps or opportunities for expansion that align with the site's core mission and audience needs, which could inform future content and keyword targeting. Initiate analysis with: [{{ $json.competitor }}]\"         }       ]     }   ], \"tools\": [\n    {\n      \"url_context\": {}\n    }\n  ],  \"generationConfig\": {     \"responseMimeType\": \"text/plain\",     \"maxOutputTokens\": 40000   } }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -416,
        48
      ],
      "id": "d15758b1-3c02-4f7d-8240-781f16ec2d87",
      "name": "Semantic profile for competitors",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "googlePalmApi": {
          "id": "jMgbCZ8ykjnrWbIr",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -640,
        0
      ],
      "id": "18da3441-023b-48a1-baef-7c629a13cfc9",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -416,
        -144
      ],
      "id": "d8b61101-fed5-4190-a143-a4e3042bc54e",
      "name": "Result"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "context",
        "fields": "=context",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        32,
        -144
      ],
      "id": "b34cf18f-eef5-4d0e-9662-04395674203c",
      "name": "MongoDB",
      "credentials": {
        "mongoDb": {
          "id": "Izj04vyOAJ9tg38z",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\nconst competitors = $input.first().json.candidates[0].content.parts[0].text;\n\nreturn [\n  {\n    context: {\n      session: $('When Executed by Another Workflow').first().json.session,\n      date: new Date(),\n      competitors: competitors\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        -144
      ],
      "id": "b94521d3-bb70-4a84-95b3-3c57e9e1c19f",
      "name": "Formating"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      message: \"Successfully completed\",\n      competitors: $('Result').first().json.candidates[0].content.parts[0].text\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        -144
      ],
      "id": "ec528614-2a34-4420-9432-5129eab351ad",
      "name": "Result message"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Target site: {{ $json.target_site }}\nBussiness goal: {{ $json.buissenes_goal }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a professional industry analyst AI.\n\n🎯 Objective: Given the following:\n- `TARGET_SITE`: A website URL (the company or product we want to benchmark)\n- `BUSINESS_GOAL`: The main business objective of the target (e.g., generate leads, grow ecommerce sales, enter new markets, etc.)\n\n🔍 Your task:\nUse your market intelligence, internet research skills, and industry knowledge to identify the **top 5 closest competing companies or websites**.\n\nThese competitors should:\n- Serve a **similar customer segment**\n- Offer **comparable products or services**\n- Operate in a **similar industry or market niche**\n- Have an online presence (ideally commercial websites)\n\n📌 Constraints:\n- Do not include the `TARGET_SITE` itself.\n- Do not make up fake companies or domains.\n- Focus on **real, active websites** with a clear market presence.\n\n📤 Output format:\nRespond with **valid raw JSON only** — no commentary or explanations:\n\n```json\n{\n  \"competitors\": [\"competitor1.com\", \"competitor2.com\", \"competitor3.com\", \"competitor4.com\", \"competitor5.com\"]\n}\n💡 You may optionally use tools such as search queries, website content understanding, and web context reasoning to refine your selection.",
          "maxIterations": 20
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1360,
        0
      ],
      "id": "60ab04ad-edd6-4088-b76e-97fc670f6b2d",
      "name": "AI Agent",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ new Date().toISOString().replace(/[^\\w]/g, '') + '-' + Math.floor(Math.random() * 10000) }}\n",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1360,
        240
      ],
      "id": "6887be31-904e-4b4b-9e02-00fd70a05444",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp-01-21",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1552,
        224
      ],
      "id": "e730d861-25cf-4c2c-9b55-cf3777161cea",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jMgbCZ8ykjnrWbIr",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool when you need target site semantic profile from MongoDB",
        "collection": "context",
        "options": {},
        "query": "={ \"context.session\": \"{{ $('When Executed by Another Workflow').item.json.session }}\", \"context.target_site_semantic_profile\": { \"$exists\": true } } "
      },
      "type": "n8n-nodes-base.mongoDbTool",
      "typeVersion": 1.1,
      "position": [
        -1200,
        224
      ],
      "id": "583e231a-c3eb-4d08-8bd5-43bdfe06020e",
      "name": "Target site semantic profile data from MongoDB",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "Izj04vyOAJ9tg38z",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{ \"competitors\":[\"competitor-1.com\", \"competitor-2.com\", \"competitor-3.com\"]}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1008,
        224
      ],
      "id": "e15c380a-05a0-4bd2-a573-a03a7bc4e434",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// Получаем массив конкурентов из входного JSON\nconst competitors = $input.first().json.output.competitors;\n\n// Возвращаем каждый конкурент как отдельный item\nreturn competitors.map(name => ({\n  json: { competitor: name }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        0
      ],
      "id": "6317fc65-db76-4049-803f-f544a1ef013c",
      "name": "Code"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "target_site"
            },
            {
              "name": "session"
            },
            {
              "name": "buissenes_goal"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1680,
        0
      ],
      "id": "dcb0efb0-a784-4bee-b6ae-ef2474b5ac98",
      "name": "When Executed by Another Workflow"
    }
  ],
  "connections": {
    "Semantic profile for competitors": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Result",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Semantic profile for competitors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Result": {
      "main": [
        [
          {
            "node": "Formating",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Result message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formating": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Target site semantic profile data from MongoDB": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "target_site": "https://www.dizzain.com",
          "session": "1752657733.899859",
          "buissenes_goal": "attract similar high-profile clients who are interested in our services"
        }
      }
    ]
  },
  "versionId": "a8024e5b-0eb1-45e8-8378-40b55f197a85",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-28T14:28:47.730Z",
      "updatedAt": "2025-08-28T14:28:47.730Z",
      "role": "workflow:owner",
      "workflowId": "5d9OfFJK6OG15U8R",
      "projectId": "flRKzvtMN6hhu506"
    }
  ],
  "tags": []
}