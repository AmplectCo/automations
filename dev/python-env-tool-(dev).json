{
  "createdAt": "2025-07-08T06:01:42.803Z",
  "updatedAt": "2025-09-02T11:22:49.598Z",
  "id": "4DI0JfsyGx9pXHbf",
  "name": "Python env tool (dev)",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=TASK: {{ $json.output.task }}\nSESSION_ID: {{ $json.output.sessionId }}\nMONGO_URI: {{ $('Set variables').item.json.MONGO_URI }}\nDB_NAME: {{ $('Set variables').item.json.DB_NAME }}\nCOLLECTION: {{ $('Set variables').item.json.COLLECTION }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an assistant generating Python code to analyze data from dataset. The code must be formatted as an analyze() function, and the result saved to the result variable:\n\ndef analyze():\n    import json, os, subprocess  # any modules are possible\n    with open(\"ahrefs.json\", \"r\", encoding=\"utf-8\") as f:\n        data = json.load(f)\n    # ... any logic of analysis ...\n    subprocess.call([\"echo\", \"done\"])  \n    return {\"count\": len(data), \"cwd\": os.getcwd()}\n\nresult = analyze()\n\nThis is an example code of how to connect to the DB:\ndocs = await db[COLLECTION].find({\"context.session\": req.sessionId}).to_list(10000)\ndata = json.loads(json_util.dumps(docs))\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        32,
        -80
      ],
      "id": "c3b8860b-8aa8-4f60-840c-56679c262513",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ new Date().toISOString().replace(/[^\\w]/g, '') + '-' + Math.floor(Math.random() * 10000) }}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        80,
        192
      ],
      "id": "2377f177-b5f1-43d0-a67f-ce84434574d3",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://54.226.177.163:8003/run-code",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\"sessionId\":\"{{ $('Information Extractor').item.json.output.sessionId }}\", \"code\": {{ JSON.stringify($json.output.code) }} }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        448,
        -80
      ],
      "id": "1a9e27fc-8c10-4a3f-9107-dbfa4547aaa2",
      "name": "HTTP Request"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -800,
        -96
      ],
      "id": "632ed027-3069-4d19-bd8f-eef0aec9366f",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -336,
        160
      ],
      "id": "5109c17b-29fe-44bc-b7d6-9bce3528db46",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "jMgbCZ8ykjnrWbIr",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.chatInput }}",
        "attributes": {
          "attributes": [
            {
              "name": "sessionId",
              "description": "sessionId",
              "required": true
            },
            {
              "name": "task",
              "description": "Task for code tool",
              "required": true
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        -368,
        -80
      ],
      "id": "0dce6e77-e292-43bf-aadc-b2ebc1f0a4c4",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6088ffa4-00ff-404b-b23a-22fb10d6f9eb",
              "name": "chatInput",
              "value": "={{ $json.query }} ",
              "type": "string"
            },
            {
              "id": "7b120b28-e61b-4879-bef8-e84e0473bdc3",
              "name": "MONGO_URI",
              "value": "mongodb+srv://paveltolstyko:F8FLRoClyXIu2Dm7@marketing-automations.qkxoxwk.mongodb.net/",
              "type": "string"
            },
            {
              "id": "e38ba204-8f22-41c9-86c1-7b894793cc73",
              "name": "DB_NAME",
              "value": "keyword-generation",
              "type": "string"
            },
            {
              "id": "5c37b8b9-949a-49cd-ad3b-8613bef5954b",
              "name": "COLLECTION",
              "value": "context",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -560,
        -80
      ],
      "id": "6e7c51a6-41af-4108-af1d-e3f2aea1e416",
      "name": "Set variables",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\"code\":\"import json\\nwith open(\\\"ahrefs.json\\\",\\\"r\\\",encoding=\\\"utf-8\\\") as f:\\n    data=json.load(f)\\ncount=len(data)\\ntags=set()\\nfor item in data:\\n    ctx=item.get(\\\"context\\\",{})\\n    ah=ctx.get(\\\"ahrefs\\\",{})\\n    if isinstance(ah,list): ah=ah[0] if ah else {}\\n    tag=ah.get(\\\"tag\\\")\\n    if tag: tags.add(tag)\\nreturn {\\\"count\\\": count, \\\"unique_tags\\\": list(tags)}\"}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        272,
        160
      ],
      "id": "470a2fa0-f397-420f-9ef5-11822898bd09",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -112,
        208
      ],
      "id": "239ada6a-f4ab-46b1-9545-61cebf3d2da1",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jMgbCZ8ykjnrWbIr",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "connections": {
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Set variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Set variables": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {
          "query": "Connect to MongoBD and say how much documents there in collection. You need files only with current 'session'. session: 1750162566.321979"
        }
      }
    ]
  },
  "versionId": "3899b82b-4f94-4c9a-92c4-1cabfcf059a2",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-28T14:28:36.443Z",
      "updatedAt": "2025-08-28T14:28:36.443Z",
      "role": "workflow:owner",
      "workflowId": "4DI0JfsyGx9pXHbf",
      "projectId": "flRKzvtMN6hhu506"
    }
  ],
  "tags": []
}