{
  "createdAt": "2025-08-26T08:34:30.984Z",
  "updatedAt": "2025-09-02T11:19:06.896Z",
  "id": "XsSdDiIgImxbI25p",
  "name": "Update knowledge base (via Lovable)",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        624,
        0
      ],
      "id": "52ffca0e-437d-4fe9-bca3-15655884eb66",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "egr-assistant",
          "mode": "list",
          "cachedResultName": "egr-assistant"
        },
        "embeddingBatchSize": 1,
        "options": {
          "pineconeNamespace": "context"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        1216,
        32
      ],
      "id": "ea74cb0d-91db-47fb-a3a3-64349455fc31",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "XB4nrCQoGoV5JI1T",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {
          "dimensions": 1024
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1072,
        320
      ],
      "id": "067e1397-891d-400e-a34c-8956365705f5",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "dcmVPYyhdCrHZYTu",
          "name": "OpenAi account (paid)"
        }
      }
    },
    {
      "parameters": {
        "dataType": "binary",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_name",
                "value": "={{ $('Webhook1').first().binary.data0.fileName }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        1408,
        320
      ],
      "id": "8afe9f1b-cb23-4afe-bd53-66699b12f712",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1296,
        544
      ],
      "id": "e97c0427-60ea-43ef-ad1f-6eaa20d3bb8e",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "cb7d7a44-73c8-4ef3-883c-267ba7f829a3",
        "options": {
          "binaryPropertyName": "data"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -272,
        272
      ],
      "id": "33d1f9a4-1431-458d-a822-52809e201d2a",
      "name": "Webhook1",
      "webhookId": "cb7d7a44-73c8-4ef3-883c-267ba7f829a3"
    },
    {
      "parameters": {
        "jsCode": "const file = $('Webhook1').first().binary.data0;\n\nfunction simpleHash(str) {\n  let hash = 0, i, chr;\n  if (str.length === 0) return hash.toString();\n  for (i = 0; i < str.length; i++) {\n    chr   = str.charCodeAt(i);\n    hash  = ((hash << 5) - hash) + chr;\n    hash |= 0; // 32-bit\n  }\n  return hash.toString();\n}\n\nreturn items.map(item => {\n  const rowJson = item.json;\n  const rowString = JSON.stringify(rowJson);\n\n  return {\n    json: {\n      dataset: file.dataset || 'default',\n      source_file: file.fileName || 'upload.csv',\n      data: rowJson\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        688
      ],
      "id": "21e0a1ba-459b-4bec-8646-022c8188a12c",
      "name": "Code"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "raw_rows",
          "mode": "list",
          "cachedResultName": "raw_rows"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "dataset",
              "displayName": "dataset",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "source_file",
              "displayName": "source_file",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "data",
              "displayName": "data",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_hash",
              "displayName": "row_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ingested_at",
              "displayName": "ingested_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        880,
        688
      ],
      "id": "2d389dfc-8452-4feb-bad3-b8e2e5a6d8aa",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "wnxCU9Qwx7x8twst",
          "name": "egr-assistant"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ed2be0d8-99c7-4f2e-b395-83cfa0537b93",
                    "leftValue": "={{ $('Webhook1').first().binary.data0.fileExtension }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9523c40a-7846-491b-870d-fd4fee888454",
                    "leftValue": "={{ $('Webhook1').first().binary.data0.fileExtension }}",
                    "rightValue": "txt",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6d6c760d-7d5f-4d83-aa30-2a92be6d4e7e",
                    "leftValue": "={{ $('Webhook1').first().binary.data0.fileExtension }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6bcc42c0-5625-4917-be00-0810316ee87a",
                    "leftValue": "={{ $('Webhook1').first().binary.data0.fileExtension }}",
                    "rightValue": "json",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook1').first().binary.data0.fileExtension }}",
                    "rightValue": "csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "169a82b3-98ca-4933-88b1-8be918f9be42"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a9934d6c-1bf7-42fc-95e7-e0abdfb4f7fa",
                    "leftValue": "={{ $('Webhook1').first().binary.data0.fileExtension }}",
                    "rightValue": "xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        96,
        208
      ],
      "id": "76159044-a26a-4c0b-8985-1522c4d3f010",
      "name": "Switch"
    },
    {
      "parameters": {
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        384,
        576
      ],
      "id": "3920c3f3-3a6d-43e4-934c-fbb33cb51dc9",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        352,
        800
      ],
      "id": "1b086055-e548-4373-a86d-8b1262b92387",
      "name": "Extract from XLSX"
    }
  ],
  "connections": {
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from XLSX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from XLSX": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Google Drive Trigger": {
      "lastTimeChecked": "2025-08-26T08:29:39Z"
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "eba82d3a-819d-486f-95ff-97955038b8b2",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-28T14:32:31.152Z",
      "updatedAt": "2025-08-28T14:32:31.152Z",
      "role": "workflow:owner",
      "workflowId": "XsSdDiIgImxbI25p",
      "projectId": "flRKzvtMN6hhu506"
    }
  ],
  "tags": []
}