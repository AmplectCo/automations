{
  "createdAt": "2025-08-22T08:10:22.041Z",
  "updatedAt": "2025-09-02T11:18:56.815Z",
  "id": "NTp0TiNxoiMt6khU",
  "name": "Assistant",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=QUESTION FROM USER: {{ $('Webhook').first().json.body.query }}\n\nFILE FROM USER: {{ $('Text files').isExecuted ? $('Text files').first().json.data : null }} {{ $('PDF').isExecuted ? $('PDF').first().json.data : null }} {{ $('DOCX').isExecuted ? $('DOCX').first().json.data : null }} {{ $('CSV').isExecuted ? $('CSV').first().json.data : null }} {{ $('XLSX').isExecuted ? $('XLSX').first().json.data : null }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=Role as \"AI Assistant\":\nYou are an AI Assistant. Your responses must be thorough, well-reasoned, and supported by clear, step-by-step explanations when needed. Avoid superficial or lazy answers—every response should include detailed analysis and factual data drawn from the context without adding extraneous content.\n\nTone:\nMaintain an empathetic and supportive tone in all interactions. Answer from a first-person perspective (\"I\") as if you are a knowledgeable educator and mentor. Acknowledge any limitations if necessary while consistently expressing willingness to help and learn.\n\nLanguage:\nAlways respond in the same language in which the question was asked.\n\nAnswering Queries:\nAnswer only based on the facts available in the provided context. Do not invent information if it is not present in the CONTEXT INFORMATION or FILES from user. Your responses must be comprehensive and logically structured with detailed explanations—but avoid unnecessary repetition or filler language.\n\nHandling Only Related Questions:\nRespond only to questions that directly or indirectly relate to the context. If a question does not relate, politely decline to answer.\n\nFirst-Person Interaction:\nAlways respond in the first person as \"AI Assistant,\" ensuring that your communication reflects your role consistently throughout the conversation.\n\nFirst of all, start from the MAIN CONTEXT and from the files that the user sent. But also use your tools to get an additional context. If the information from the MAIN CONTEXT contradicts the additional context use the main context.\n\nYou have a tool called \"Get main context\" at your disposal. Use it to get MAIN CONTEXT. This is MANDATORY tool for use. You can't give an answer based only on knowledge from \"Pinecone Vector Store\" or \"SQL tool\".\n\nYou have a tool called \"Pinecone Vector Store\" at your disposal. Use it to get additional context.\n\nYou have a \"SQL tool\" using it you can communicate with the database and receive accurate answers according to tabular data. Generate questions in the DB in text form (not SQL). \n\nBefore you answer that you have no information, be sure that you have used all the tools that are available to you.\n\nBe sure to indicate the source on which you base your answer (exact file names).\n\nCRITICALLY IMPORTANT: Do not make up information, every fact you state must be supported by an existing source.\n\nAnalyze the data you have if the user asks for it.\n\nFormatting (HTML):\n• Provide answers for the “answer” field as an HTML fragment (omit <html>, <head>, <body>).\n• Structure:\n– <h2> for the main heading (when needed).\n– <h3> for sub-sections.\n– <p> for paragraphs 2-4 lines long. No extra blank lines between paragraphs—HTML adds spacing automatically.\n– <ul><li> for bullet lists.\n– <ol><li> for ordered lists when sequence matters.\n– <strong> to emphasize key terms.\n– <em> for clarifications or minor accents.\n– <code> for inline code or commands.\n– <pre><code> … </code></pre> for multi-line code blocks.\n• Do not add inline CSS styles or unnecessary wrappers (div/span) unless required.\n• Avoid nested lists deeper than two levels.\n• Do not insert empty <p></p> tags; if visual separation is needed, use <hr>.\n• Tables are allowed for clear comparisons:\n<table><thead>…</thead><tbody>…</tbody></table> — but only when they truly enhance readability.\n• You may start with a brief summary (1-2 sentences), then an <hr>, followed by detailed content.\n• Do not use deprecated HTML5 tags (<font>, <center>, <b> instead of <strong>, etc.).\n\n\nThe expected answer format is a JSON object. For example:\n{\n\"answer\": \"Text with your response\"\n}",
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        896,
        -16
      ],
      "id": "bb0bfb2d-d6e8-4715-84fe-47ec99352baa",
      "name": "AI Agent",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        96,
        256
      ],
      "id": "201dd57d-c4dd-429b-ba88-9f02f12ff3a9",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jMgbCZ8ykjnrWbIr",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').first().json.body.session }}",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        368,
        320
      ],
      "id": "b77fa6bb-e3be-4b2b-9fa3-e5fe2b971bb4",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {
          "dimensions": 1024
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        560,
        688
      ],
      "id": "8557f481-c0be-4020-a141-7b6759239686",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "dcmVPYyhdCrHZYTu",
          "name": "OpenAi account (paid)"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "a6ab3226-12e8-45c2-8bdb-0b6398d0459b",
        "options": {
          "binaryPropertyName": "data",
          "rawBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -336,
        -400
      ],
      "id": "7b317165-3fc3-496b-9025-f7db0acd8f60",
      "name": "Webhook",
      "webhookId": "a6ab3226-12e8-45c2-8bdb-0b6398d0459b"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"answer\": \"Some text\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1664,
        176
      ],
      "id": "a33a9fd6-f45d-4561-b979-35da8256d005",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1584,
        352
      ],
      "id": "0135c9b7-d9de-4a62-a033-2c197f878fc3",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "jMgbCZ8ykjnrWbIr",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -112,
        272
      ],
      "id": "f56b5e39-f465-4d87-888b-50eccbb843cb",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dcmVPYyhdCrHZYTu",
          "name": "OpenAi account (paid)"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dtlohmhykwaxtxmewcae.supabase.co/functions/v1/receive-data",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=answer",
              "value": "={{ $json.output.answer }}"
            },
            {
              "name": "session",
              "value": "={{ $('Webhook').item.json.body.session }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2112,
        -48
      ],
      "id": "3ff2b2ab-4690-40a5-80a5-932c532e5fe4",
      "name": "HTTP Request",
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "description": "Use this tool when you need to get accurate data from the database.",
        "workflowId": {
          "__rl": true,
          "value": "EJi6NfIMNCP6oc8J",
          "mode": "list",
          "cachedResultName": "SQL tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "session": "={{ $('Webhook').first().json.body.session }}",
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', `Text request in the database (not SQL).`, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "session",
              "displayName": "session",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1264,
        352
      ],
      "id": "c8636fb6-c583-4010-8463-c6ceb9d6cb23",
      "name": "SQL tool"
    },
    {
      "parameters": {
        "description": "Use this tool to get the MAIN CONTEXT",
        "workflowId": {
          "__rl": true,
          "value": "iWiR8VeatERhYKB9",
          "mode": "list",
          "cachedResultName": "Get main context"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "session": "={{ $('Webhook').first().json.body.session }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "session",
              "displayName": "session",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1120,
        336
      ],
      "id": "0ef7c827-cf24-4a95-907a-48cebc2f09c0",
      "name": "Get main context"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use it to get additional context",
        "pineconeIndex": {
          "__rl": true,
          "value": "egr-assistant",
          "mode": "list",
          "cachedResultName": "egr-assistant"
        },
        "topK": 30,
        "options": {
          "pineconeNamespace": "context"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        640,
        512
      ],
      "id": "b4161149-1eed-4dc6-8a60-845b866aae09",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "XB4nrCQoGoV5JI1T",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ed2be0d8-99c7-4f2e-b395-83cfa0537b93",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9523c40a-7846-491b-870d-fd4fee888454",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "txt",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6d6c760d-7d5f-4d83-aa30-2a92be6d4e7e",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "docx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "169a82b3-98ca-4933-88b1-8be918f9be42"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a9934d6c-1bf7-42fc-95e7-e0abdfb4f7fa",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "42abfd1f-06ba-4510-ad3a-4c2ab03971d4",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "png",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "969b73a8-0625-4d9d-9f0d-a7857e15f3d1",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "jpg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9e3df1e3-15c3-42ee-aeba-57c177d72a99",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "beb0fa88-b98f-4cea-b9da-0c450080261b",
                    "leftValue": "={{ $('Webhook').first().binary.data0.fileExtension }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -48,
        -368
      ],
      "id": "03e00174-9c49-41ad-94f2-73061311bfe9",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        384,
        -736
      ],
      "id": "582f923f-408b-4d45-a117-4e8b79d35673",
      "name": "PDF"
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        384,
        -608
      ],
      "id": "1fa214e5-216a-47fe-8435-92cb7e5f47d4",
      "name": "Text files"
    },
    {
      "parameters": {
        "inputBinaryField": "data0",
        "destinationOutputField": "data"
      },
      "type": "n8n-nodes-docx-converter.docxToText",
      "typeVersion": 1,
      "position": [
        384,
        -496
      ],
      "id": "a88e9fe0-3799-4007-96f1-18e8c4c991e5",
      "name": "DOCX"
    },
    {
      "parameters": {
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        384,
        -368
      ],
      "id": "e51b2123-3407-43e6-8d2b-c1e33e7fc8a5",
      "name": "CSV"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "data0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        384,
        -224
      ],
      "id": "67cd2fe2-b35b-4d92-8bd4-6996465c71f0",
      "name": "XLSX"
    }
  ],
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "SQL tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get main context": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text files",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DOCX",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "XLSX",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text files": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DOCX": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XLSX": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "edf03409-785e-4cc5-9a4e-a40aed59304d",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-28T14:31:30.109Z",
      "updatedAt": "2025-08-28T14:31:30.109Z",
      "role": "workflow:owner",
      "workflowId": "NTp0TiNxoiMt6khU",
      "projectId": "flRKzvtMN6hhu506"
    }
  ],
  "tags": []
}