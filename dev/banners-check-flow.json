{
  "createdAt": "2025-06-25T10:49:21.683Z",
  "updatedAt": "2025-07-16T07:41:08.217Z",
  "id": "KmyULMzL96JXwFFt",
  "name": "Banners check flow",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1264,
        -176
      ],
      "id": "933a0e3e-7e6f-47f4-a461-cfe9938079fa",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You are an expert AI Visual Content Analyst and Advertising Copy Editor. Your most important skill is to distinguish between text that is part of the digital ad design (the overlay) and text that exists within the photograph itself (the scene).\n\nYour tasks:\n\n**1. Isolate the True Advertising Overlay Text. This is your most critical task.**\n\n**CRITICAL PRE-STEP: LITERAL TRANSCRIPTION**\nBefore you begin, understand this core principle: Your first job is to be a scanner, not an editor. You must extract text **exactly as it appears**, including any visible errors.\n-   **Crucial Example:** If the image text is `LIVERPOOLFC` without a space, you **must** extract it as `LIVERPOOLFC`. Do not \"fix\" it to `LIVERPOOL FC` during this extraction step. The analysis of the missing space is the job of Step 3. Your task here is only to read what is there.\n\n*   **Step A: Initial Scan:** Following the literal transcription rule above, locate all recognizable text fragments in the image.\n*   **Step B: The Critical Filter:** For each text fragment, you must determine if it is **Overlay Text** or **Scene Text**. This is the key decision.\n    *   **Overlay Text (KEEP):** This is text belonging to the top-most graphical design layer, added by a designer *after* the photograph was taken. It is NOT part of the original photo. You must scan the entire ad canvas for this text, as it can appear in any part of the layout (headers, footers, sidebars, etc.).\n        *   **Key Indicators:**\n            *   **Placed on a distinct graphical element:** The text sits on a shape added by the designer, such as a **solid color bar (like a header or footer), a button, a geometric shape, or a semi-transparent panel.** This is the strongest indicator.\n            *   **Part of a feature or benefit list:** The text serves to list product features, benefits, or certifications. This text is often arranged neatly in columns or rows. **It may be accompanied by icons, but the icons are not a requirement for identification.**\n            *   **Visually \"Flat\" and Crisp:** The text has a uniform appearance and is not affected by the photo's perspective, lighting, or focus. It \"floats\" above the image.\n\n    *   **Scene Text (IGNORE):** This is any text that physically exists within the world of the photograph. If you were \"standing\" in the scene, you could see this text. This includes two main categories you must ignore:\n        *   **A) Product Packaging & Labels (CRITICAL TO IGNORE):** You **must ignore all text that is printed on the physical product being photographed**. This includes text on **bottles, jars, boxes, cans, tags, and any other product packaging**.\n        *   **B) Background & Environmental Text:** This is text on **physical signs** in the background, logos on walls, text on **posters** within the scene, and text on objects like **license plates** or clothing.\n*   **Step C: Final Selection:** After filtering, extract **ONLY the text that you have confidently identified as Overlay Text**.\n\n**2. Automatically detect the language of the extracted text and use it for all further analysis.**\n\n**3. Analyze the extracted text with high strictness. Pay special attention to the following specific issues:**\n\n*   **General Errors:** Check for standard **spelling** mistakes (typos), **grammar** errors (e.g., subject-verb agreement), and incorrect **punctuation**. This explicitly includes finding **missing spaces between words** (e.g., `LIVERPOOLFC`) and flagging them as a **`spelling`** or **`style`** error.\n\n*   **Capitalization Rules:**\n    *   **Sentence Capitalization:** In a body of text with multiple sentences, each new sentence must begin with a capital letter. If it does not (e.g., \"Buy now. it's on sale!\"), flag this as a **`punctuation`** error.\n    *   **Proper Noun Capitalization (Critical):** It is a critical rule that geographical proper nouns (cities, countries) must be capitalized. Find errors like \"london\", \"germany\", or \"**italy**\" and flag them as a **`spelling`** error. This rule does not apply if the entire phrase is in ALL CAPS.\n\n*   **Visual Integrity and Cropping Errors:** You must carefully inspect if text is being improperly cut off. There are two distinct types of errors:\n    *   **A) Critical Image Frame Cropping:** This is a major error. It occurs when text is cut off by the **outer edge of the image file itself**. This makes the message incomplete or unreadable.\n        *   **Example:** A line of text like \"buy it now\" being cut off at the bottom of the banner.\n        *   **Action:** Flag this as a **`spelling`** error, as it results in an incomplete word, and state clearly in the comment that the text is cut off by the image frame.\n\n    *   **B) Internal Padding Error:** This is a more subtle layout flaw. It occurs when text is placed too close to the edge of its *internal container* (e.g., a colored box or a speech bubble), causing parts of letters to be slightly trimmed (like the bottom of a 'y' or 'g').\n        *   **Action:** Flag this as a **`style`** error and suggest adding more padding or adjusting the layout.\n\n*   **Aggressive or Offensive Tone:** Analyze the text for phrases that could be considered rude, aggressive, or offensive to the user (e.g., \"Don’t be dumb - buy it now\"). Flag this as a **`style`** error and suggest a more neutral, professional alternative.\n\n**4. Do not flag or correct brand/product names *if they are part of the Overlay Text*.** However, names on **product packaging** must be identified as **Scene Text** and excluded.\n\n**5. ALL CAPS Text Rule:** If a phrase in the overlay text is written in ALL CAPS (e.g., \"BIG SALE TODAY\"), this is considered an intentional design choice. You must **not** flag it for capitalization errors. However, you **must still analyze this text for all other types of errors**, such as spelling (e.g., \"BIG SLLE\"), punctuation (e.g., \"BIG SALE TODAY!!!\"), or grammar.\n\n**6. Do not suggest adding punctuation (such as periods) at the end of standalone phrases or headings where it's clearly omitted for design.**\n\n**7. Only include real, confirmed issues.** Do not include \"no issue\" messages.\n\n**8. Provide clear and concise suggestions for each issue.**\n\nReturn your result in the following strict JSON format.\n\n**Important**: Output only the JSON object above. Do not include any additional text, comments, or characters before or after the JSON.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "messageType": "imageBinary"
            }
          ]
        }
      },
      "id": "93540765-050e-4a8d-90a6-2d42b1619a1e",
      "name": "Parse and check text",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1680,
        208
      ],
      "typeVersion": 1.4,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 2,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        768,
        -16
      ],
      "id": "8f46744b-257c-4e45-a8e9-9a58ee8cbdfd",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "const bannerObj = $('Loop Over Items').first();\nreturn {\n  json: {\n    ...bannerObj.json,\n    report: $input.first().json.output\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        208
      ],
      "id": "3c4d41a3-e061-4057-92be-b6820be92933",
      "name": "Concat bannerObj + report"
    },
    {
      "parameters": {
        "jsCode": "const banners = $('Loop Over Items').all() || [];\nconst outputBanners = [];\nfor (const banner of banners) {\n  let spellingErrorsArr = [];\n  let punctuationErrorsArr = [];\n  let grammarErrorsArr = [];\n  let speechErrorsArr = [];\n  let styleErrorsArr = [];\n  \n\n  if (banner.json.report.issues_found.length) {\n    for (const error of banner.json.report.issues_found) {\n      const textArr = [];\n      const type = error.type.toLowerCase();\n      delete error.type;\n      \n      for (const key in error) {\n        textArr.push(`${key}: ${error[key]}`)\n      }\n\n      if(type.includes('spell')) {\n        spellingErrorsArr.push(textArr.join(\"\\n\"));\n      } else if(type.includes('punct')) {\n        punctuationErrorsArr.push(textArr.join(\"\\n\"));\n      } else if(type.includes('gram')) {\n        grammarErrorsArr.push(textArr.join(\"\\n\"));\n      } else if(type.includes('speech')) {\n        speechErrorsArr.push(textArr.join(\"\\n\"));\n      } else if(type.includes('style')) {\n        styleErrorsArr.push(textArr.join(\"\\n\"));\n      }\n    }\n  }\n  \n  outputBanners.push({\n    name: `=HYPERLINK(\"${banner.json.webViewLink}\", \"${banner.json.name}\")`,\n    thumbnail: `=IMAGE(\"${banner.json.thumbnailLink}\")`,\n    extracted_text: banner.json.report.extracted_text,\n    'Spelling errors': spellingErrorsArr.join(\"\\n---------------\\n\"),\n    'Punctuation errors': punctuationErrorsArr.join(\"\\n---------------\\n\"),\n    'Grammar errors': grammarErrorsArr.join(\"\\n---------------\\n\"),\n    'Speech errors': speechErrorsArr.join(\"\\n---------------\\n\"),\n    'Style errors': styleErrorsArr.join(\"\\n---------------\\n\"),\n    final_corrected_version: banner.json.report.final_corrected_version,\n  })\n}\nreturn outputBanners;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        -208
      ],
      "id": "adf63bdc-9583-4d04-aca9-afbc5bc4407b",
      "name": "Prepare report columns"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1pbit9pb-zbJQBfW-AHncTE1Ijoa6qkBBTjEi93QDx4I",
          "mode": "list",
          "cachedResultName": "Marketing automation banners check reports",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1pbit9pb-zbJQBfW-AHncTE1Ijoa6qkBBTjEi93QDx4I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Create Sheet').first().json.sheetId }}",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1472,
        -208
      ],
      "id": "2922339a-a0a0-4c12-a067-8c522aae0da1",
      "name": "Output to google sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "8gaWRnOMLmzKzb4j",
          "name": "Google Dizzain account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "prompt": "Completion:\n--------------\n{completion}\n--------------\n\nThe model's previous response could not be parsed due to the following error:\n\n{error}\n\nPlease correct the output so that it is a valid JSON object.\n\nFix rules:\n- Only return the JSON object — no extra explanation, markdown formatting, or additional text.\n- Ensure the output matches this exact structure\n- Remove any extra characters before or after the JSON.\n- Ensure valid key-value pairs with double quotes.\n- Remove trailing commas.\n- Fix unmatched braces or brackets.\n\nImportant: Output only the corrected JSON.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        1760,
        400
      ],
      "id": "bbdbdb5c-9930-4f54-8da4-272b634d1ca9",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"extracted_text\": \"Full raw text extracted from the image, exactly as it appears\",\n  \"issues_found\": [\n    {\n      \"type\": \"spelling | grammar | punctuation | speech | style\",\n      \"original\": \"Text with the issue\",\n      \"suggestion\": \"Suggested correction\",\n      \"comment\": \"Explanation of the issue\"\n    }\n  ],\n  \"final_corrected_version\": \"Fully corrected version of the banner text\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1952,
        528
      ],
      "id": "1130618a-3cef-4b65-b724-b058aef857b7",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "create",
        "documentId": {
          "__rl": true,
          "value": "1pbit9pb-zbJQBfW-AHncTE1Ijoa6qkBBTjEi93QDx4I",
          "mode": "list",
          "cachedResultName": "Marketing automation banners check reports",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1pbit9pb-zbJQBfW-AHncTE1Ijoa6qkBBTjEi93QDx4I/edit?usp=drivesdk"
        },
        "title": "={{ DateTime.fromMillis($('Slack Trigger').first().json.ts * 1000).format('yyyy-MM-dd|TT') }}",
        "options": {
          "index": 0
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1008,
        -208
      ],
      "id": "986900e9-507c-45f5-8f91-48d4c548e691",
      "name": "Create Sheet",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "8gaWRnOMLmzKzb4j",
          "name": "Google Dizzain account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1712,
        528
      ],
      "id": "4ac37dfe-5059-48de-8ffd-d98c6fbbb0a6",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "7kz1mLmeMk9seZNy",
          "name": "Alexey's gemini API"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $('Loop Over Items').item.json.thumbnailLink.replace(/=s\\d+/, \"=s560\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        208
      ],
      "id": "bcfb4afc-660a-4b4a-9274-b859e2b39fb2",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "banners",
          "mode": "list",
          "cachedResultName": "banners"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -224,
        64
      ],
      "id": "c549a194-7612-45bc-9a34-08c86e0d2ac3",
      "name": "all db banners",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "guKVmeN2CuQNmXi0",
          "name": "i9 db"
        }
      }
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        0,
        -16
      ],
      "id": "c74aa1a4-612b-4ea0-ba6c-8f6a7401747d",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const dbBanners = $(\"all db banners\").all() || [];\nconst banner = $input.first().json || {};\n\nif (!dbBanners.length) {\n  return {};\n}\n\nconst dbBanner = dbBanners.find(ban => ban.json.id === banner.id);\n\nif(!!dbBanner && dbBanner.json.version === banner.version) {\n  return {\n    json: {\n      ...dbBanner.json\n    }\n  }\n}\n\nreturn {};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        -16
      ],
      "id": "17277b08-9194-488b-a307-3d603bbd0378",
      "name": "Get db banner",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b11a98d6-f369-48e7-a628-c9e226f76c5b",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1232,
        -16
      ],
      "id": "0d11aedf-6202-4633-b67a-96b0bc069133",
      "name": "Has db banner"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "banners",
          "mode": "list",
          "cachedResultName": "banners"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "name": "={{ $json.name }}",
            "version": "={{ $json.version }}",
            "report": "={{ $json.report }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "version",
              "displayName": "version",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "report",
              "displayName": "report",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2304,
        112
      ],
      "id": "61801a31-2952-45ab-a55e-5dd0dcb349c5",
      "name": "Save/update banner in db",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "guKVmeN2CuQNmXi0",
          "name": "i9 db"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bb35d458-c64c-483b-8071-d04b6c29e45d",
              "name": "id",
              "value": "={{ $('Loop Over Items').item.json.id }}",
              "type": "string"
            },
            {
              "id": "9d9e3197-9d86-4372-9610-04b31d7afee1",
              "name": "name",
              "value": "={{ $('Loop Over Items').item.json.name }}",
              "type": "string"
            },
            {
              "id": "3b9202ee-e6e2-4cae-858c-1d5cd2fbd583",
              "name": "version",
              "value": "={{ $('Loop Over Items').item.json.version }}",
              "type": "string"
            },
            {
              "id": "bb7a4971-b7e5-46f3-8241-bf50bafe4e6d",
              "name": "webViewLink",
              "value": "={{ $('Loop Over Items').item.json.webViewLink }}",
              "type": "string"
            },
            {
              "id": "673df79b-1a43-4b40-806a-da084f0d8de7",
              "name": "thumbnailLink",
              "value": "={{ $('Loop Over Items').item.json.thumbnailLink }}",
              "type": "string"
            },
            {
              "id": "0851cb7f-ec7b-4bb4-b890-e9f16a86b0c7",
              "name": "report",
              "value": "={{ $json.report }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1472,
        -16
      ],
      "id": "1327166c-c826-4b3e-a06a-d3fe4003c7d5",
      "name": "Map fields"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        2480,
        208
      ],
      "id": "384b5515-b25e-45d4-b8fa-901a957dfba7",
      "name": "Return all banner obj"
    },
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "watchWorkspace": true,
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        -1264,
        -16
      ],
      "id": "985e855c-ac03-4fd0-b421-14bc21d100d6",
      "name": "Slack Trigger",
      "webhookId": "c15c6020-a05c-43d7-91df-a30bb9b816fa",
      "credentials": {
        "slackApi": {
          "id": "KA0U5XMZlvs9NKR4",
          "name": "Banners check bot API"
        }
      }
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "={{ $('Slack Trigger').first().json.user }}",
          "mode": "id"
        },
        "text": "=Analysis is finished. <https://docs.google.com/spreadsheets/d/{{ $('Create Sheet').item.json.spreadsheetId }}/edit#gid={{ $('Create Sheet').item.json.sheetId }}|Here is a report!>",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Slack Trigger').first().json.ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1680,
        -208
      ],
      "id": "749708cc-899b-434f-8c46-8faec9268a14",
      "name": "Slack",
      "webhookId": "664a54e7-5fd9-4926-a164-a6dc2307d5f6",
      "executeOnce": true,
      "credentials": {
        "slackApi": {
          "id": "KA0U5XMZlvs9NKR4",
          "name": "Banners check bot API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ad16012a-c90d-4388-825a-ec266baa5767",
              "leftValue": "={{ $json.type }}",
              "rightValue": "link",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6763d3e4-3126-4fe5-a8ed-c0a9f144395f",
              "leftValue": "={{ $json.url }}",
              "rightValue": "https://drive.google.com/drive",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -656,
        -16
      ],
      "id": "b1219af9-ec0c-4555-ba6f-715509c45a5b",
      "name": "Filter1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "blocks[0].elements[0].elements",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -864,
        -16
      ],
      "id": "2bc80c3b-baac-4da6-a884-1e544633e8da",
      "name": "Split Out"
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "={{ $('Slack Trigger').first().json.user }}",
          "mode": "id"
        },
        "text": "=The link isn't Google Drive folder",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Slack Trigger').first().json.ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -224,
        224
      ],
      "id": "67096268-d69e-46eb-93d9-3fa9a22c8f1c",
      "name": "Is not google drive link",
      "webhookId": "40f42a9c-51b2-4036-b656-f9b1ea35f471",
      "executeOnce": true,
      "credentials": {
        "slackApi": {
          "id": "KA0U5XMZlvs9NKR4",
          "name": "Banners check bot API"
        }
      }
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "={{ $('Slack Trigger').first().json.user }}",
          "mode": "id"
        },
        "text": "=Analysis is started",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Slack Trigger').first().json.ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        592,
        -208
      ],
      "id": "b3d5f4e0-098c-4cc7-8f5f-0d6125769d36",
      "name": "Start process",
      "webhookId": "9747af85-fb45-44dc-9328-f5ef1a26d51d",
      "executeOnce": true,
      "credentials": {
        "slackApi": {
          "id": "KA0U5XMZlvs9NKR4",
          "name": "Banners check bot API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "77b9bf2d-445a-4154-9902-88b479e45173",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -464,
        -16
      ],
      "id": "607f8e65-0cdc-4798-9bc6-f4bf941c0fde",
      "name": "Has google drive link"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1fc40f68-a840-4c42-ab01-7e3aa2420552",
              "leftValue": "={{ $input.first().json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        384,
        -16
      ],
      "id": "163878a5-2490-4e7f-8570-ba08272a2b8f",
      "name": "Has images"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a3e5e50a-794e-4de0-859c-9b37d9fed07f",
              "leftValue": "={{ $json.name }}",
              "rightValue": ".png",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            },
            {
              "id": "d2933446-f20b-49d5-8747-2b84e01c5bb6",
              "leftValue": "={{ $json.name }}",
              "rightValue": ".jpeg",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            },
            {
              "id": "90f962ee-819e-4ff8-aeea-d089275ac16e",
              "leftValue": "={{ $json.name }}",
              "rightValue": ".jpg",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        192,
        -16
      ],
      "id": "a0e9ebdf-4027-46ab-ac27-2ab1795f617f",
      "name": "Get only png",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "={{ $('Slack Trigger').first().json.user }}",
          "mode": "id"
        },
        "text": "=There are no PNG images in the folder, or you have not granted access to the folder!",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Slack Trigger').first().json.ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        592,
        144
      ],
      "id": "483993dc-f27d-41a8-8e6e-d4853509ba8b",
      "name": "No images",
      "webhookId": "80c548e0-f58a-4ebc-9b03-5e66c83a147b",
      "executeOnce": true,
      "credentials": {
        "slackApi": {
          "id": "KA0U5XMZlvs9NKR4",
          "name": "Banners check bot API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "21f54a7d-7c9b-4a57-85e6-672f9a23b291",
              "leftValue": "={{ $itemIndex }}",
              "rightValue": 1000,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        592,
        -16
      ],
      "id": "2a2ebd88-b33b-4201-9e87-2e44b0259012",
      "name": "Only first"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.shortpixel.com/v2/reducer-sync.php",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"key\": \"wZEfQrz90NPxruBWqZVz\",\n    \"plugin_version\": \"JS1231\",\n    \"lossy\": 1,\n    \"resize\": 0,\n    \"cmyk2rgb\": 1,\n    \"convertto\": \"+webp\",\n    \"refresh\": 1,\n    \"url\": \"{{$('Loop Over Items').item.json.thumbnailLink.replace(/=s\\d+/, \"=s560\")}}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1472,
        208
      ],
      "id": "518acb99-4324-4d59-b1bb-dc6f06a4739b",
      "name": "Shortpixel to webp"
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "={{ $('Slack Trigger').first().json.user }}",
          "mode": "id"
        },
        "text": "=An error occurred while executing the task. Execution id - {{ $execution.id }}.",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Slack Trigger').first().json.ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2112,
        32
      ],
      "id": "7f30af13-271e-4889-a6ad-376143498e8c",
      "name": "Error",
      "webhookId": "80c548e0-f58a-4ebc-9b03-5e66c83a147b",
      "executeOnce": true,
      "credentials": {
        "slackApi": {
          "id": "KA0U5XMZlvs9NKR4",
          "name": "Banners check bot API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1e986664-ddfc-45ed-bc69-10ec6789ea04",
              "leftValue": "={{$json.client_msg_id}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "54af58c5-9ddb-45b6-b1d4-13f4864b4359",
              "leftValue": "={{$json.client_msg_id}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1056,
        -16
      ],
      "id": "78a42805-bac2-489d-8455-fc56a4243c51",
      "name": "If"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "v50zKISZCDAMpS08",
          "mode": "list",
          "cachedResultName": "Get all folder files"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "url": "={{ $json.url }}"
          },
          "matchingColumns": [
            "url"
          ],
          "schema": [
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -224,
        -96
      ],
      "id": "dcc1611b-3dfc-4549-b5ac-c0e5d073e370",
      "name": "Execute Workflow"
    }
  ],
  "connections": {
    "Parse and check text": {
      "main": [
        [
          {
            "node": "Concat bannerObj + report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Create Sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get db banner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Concat bannerObj + report": {
      "main": [
        [
          {
            "node": "Save/update banner in db",
            "type": "main",
            "index": 0
          },
          {
            "node": "Return all banner obj",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Prepare report columns": {
      "main": [
        [
          {
            "node": "Output to google sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output to google sheet": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Parse and check text",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Create Sheet": {
      "main": [
        [
          {
            "node": "Prepare report columns",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Parse and check text",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "all db banners": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Get only png",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get db banner": {
      "main": [
        [
          {
            "node": "Has db banner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has db banner": {
      "main": [
        [
          {
            "node": "Map fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Shortpixel to webp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save/update banner in db": {
      "main": [
        [
          {
            "node": "Return all banner obj",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map fields": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return all banner obj": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Has google drive link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has google drive link": {
      "main": [
        [
          {
            "node": "all db banners",
            "type": "main",
            "index": 0
          },
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is not google drive link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has images": {
      "main": [
        [
          {
            "node": "Start process",
            "type": "main",
            "index": 0
          },
          {
            "node": "Only first",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only png": {
      "main": [
        [
          {
            "node": "Has images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Only first": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Shortpixel to webp": {
      "main": [
        [
          {
            "node": "Parse and check text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "0254d7fc-e209-419e-b7ce-1d03994f3d8b",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-28T14:30:59.262Z",
      "updatedAt": "2025-08-28T14:30:59.262Z",
      "role": "workflow:owner",
      "workflowId": "KmyULMzL96JXwFFt",
      "projectId": "flRKzvtMN6hhu506"
    }
  ],
  "tags": []
}