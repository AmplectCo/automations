{
  "createdAt": "2025-08-23T13:37:54.965Z",
  "updatedAt": "2025-08-23T17:52:52.002Z",
  "id": "uoghpVAO3aOoJnlm",
  "name": "MWF-Validator-QA",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "input"
            },
            {
              "name": "sessionId"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -848,
        160
      ],
      "id": "ce38c99f-a05a-40c9-9ba0-a99ad4d2e984",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-opus-4-1-20250805",
          "mode": "list",
          "cachedResultName": "Claude Opus 4.1"
        },
        "options": {
          "maxTokensToSample": 8000,
          "thinking": true,
          "thinkingBudget": 1024
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        96,
        480
      ],
      "id": "0ed5db0c-2d4c-46b4-8d67-1aa32473310a",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "4cYVYzk16qrR9h9B",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-chat-latest",
          "mode": "list",
          "cachedResultName": "gpt-5-chat-latest"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -528,
        384
      ],
      "id": "b2ed447c-7e0d-46bb-a3de-9290e4941c9c",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "dcmVPYyhdCrHZYTu",
          "name": "OpenAi account (paid)"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -80,
        480
      ],
      "id": "a096142b-5630-4cab-aa71-bdbeb3d5e9ca",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jMgbCZ8ykjnrWbIr",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User request: {{ $('When Executed by Another Workflow').item.json.query }}",
        "options": {
          "systemMessage": "=[ROLE]\nYou are an AI Workflow QA Engineer. Your critical mission is to perform a comprehensive quality assurance check on n8n workflows. You do not write code; you ensure that the code written by the AI Developer is technically flawless and strategically aligned with the high-level brief created by the AI Solutions Architect.\n\n[INPUT]\nYou will receive two critical pieces of data:\n\nThe Strategic Brief: A JSON object from the AI Solutions Architect outlining the workflow's objective, stages, and developerInstructions.\n\nThe Workflow JSON: The final, complete n8n workflow JSON generated by the AI Developer.\n\n[VALIDATION CHECKS]\nYou must perform a rigorous, multi-point inspection. Your final verdict depends on passing all of these checks:\n\nTechnical Validation:\n\nValid JSON: Is the Workflow JSON syntactically correct and parsable?\n\nStructural Integrity: Does it contain all required top-level keys (name, nodes, connections, settings)?\n\nStrategic Alignment:\n\nObjective Met: Does the final workflow logically achieve the objective described in the Strategic Brief?\n\nAll Stages Implemented: Does the workflow contain nodes and logic that correspond to every stage defined in the stages array of the brief? (e.g., If a stage mentions \"Create a Jira ticket,\" is there a Jira node?).\n\nInstruction Compliance:\n\nSticky Notes: Does the workflow contain meaningful and helpful Sticky Notes as requested in the developerInstructions?\n\nBest Practices: Has the developer followed key hints, such as using the AI Agent node if it was suggested in the brief?\n\n[OUTPUT FORMAT]\nYour output must be a JSON object indicating the validation status and next steps.\n\nIf validation passes you return JSON as on following example:\n\n{\n  \"status\": \"success\",\n  \"action\": \"publish\",\n  \"output\": \"{Placeholder where you should put validated and ready to use JSON}\"\n}\n\nIf validation fails, you return JSON as on following example:\n\n{\n  \"status\": \"failure\",\n  \"action\": \"rework\",\n  \"targetAgent\": \"Developer\",\n  \"feedback\": [\n    {\n      \"errorCode\": \"INVALID_CONNECTION\",\n      \"description\": \"The connection from node 'Summarize' to 'PostToSlack' is missing in the connections object.\"\n    },\n    {\n      \"errorCode\": \"MISSING_NOTE\",\n      \"description\": \"The 'GetEmails' node is missing a descriptive sticky note.\"\n    }\n  ]\n}\n\n[CONSTRAINTS]\n\nYou do not modify the JSON. Your role is strictly to validate.\n\nYour feedback must be specific, referencing the error code and providing a clear description for the Developer to act upon.\n\nThe final decision (\"publish\" or \"rework\") is yours alone."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -528,
        160
      ],
      "id": "4c2eed0a-bb01-4c3d-8659-5e5b6b761422",
      "name": "Validator"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f4b8c16e-6788-4c17-b643-94a3f0620860",
              "name": "Workflow Link",
              "value": "=https://automation.dizzain.com/workflow/{{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        704,
        16
      ],
      "id": "a20b38d8-bd2b-4165-ab90-6682b5607284",
      "name": "Workflow Link"
    },
    {
      "parameters": {
        "operation": "create",
        "workflowObject": "={{ $json.output }}",
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        336,
        16
      ],
      "id": "ad8ad8e6-33a7-4483-89b8-3f2580c63340",
      "name": "Create a workflow",
      "credentials": {
        "n8nApi": {
          "id": "7ZJB9gIi1brEzbh1",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d33f6ed3-12b4-4d43-a99e-dde6a1bc488e",
              "leftValue": "={{ $json.status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        144,
        160
      ],
      "id": "48ae4ee4-e817-4e21-86e8-8d30615af64e",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        336,
        256
      ],
      "id": "acc8e639-9ed5-4aa2-bb7f-2a34f1551681",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet results = [];\n\nfor (const item of items) {\n  const outputString = item.json.output;\n  const parsedJson = JSON.parse(outputString);\n  \n  results.push({\n    json: parsedJson\n  });\n}\n\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        160
      ],
      "id": "22bb0fb1-0901-4c87-aab7-f0921432a8f3",
      "name": "Parse JSON"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When Executed by Another Workflow').item.json.sessionId }}",
        "collectionName": "n8n_agentBuilder_chat_histories",
        "databaseName": "agents_talks",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryMongoDbChat",
      "typeVersion": 1,
      "position": [
        -432,
        464
      ],
      "id": "ebadd72a-d318-4036-ba09-541a082be428",
      "name": "MongoDB Chat Memory",
      "credentials": {
        "mongoDb": {
          "id": "WJCKSHEZDZGur3kD",
          "name": "agenttobuildagent"
        }
      }
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Validator": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Validator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a workflow": {
      "main": [
        [
          {
            "node": "Workflow Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create a workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Validator",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "48ae05e8-90e7-482b-b5e9-6b759c0ef9c5",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-28T14:35:22.819Z",
      "updatedAt": "2025-08-28T14:35:22.819Z",
      "role": "workflow:owner",
      "workflowId": "uoghpVAO3aOoJnlm",
      "projectId": "flRKzvtMN6hhu506"
    }
  ],
  "tags": []
}