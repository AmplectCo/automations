{
  "createdAt": "2025-07-11T07:21:10.352Z",
  "updatedAt": "2025-09-02T11:20:44.937Z",
  "id": "R2BisAA9qDAB0TxV",
  "name": "checking_removed_camps (all camps)",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "camps",
          "mode": "list",
          "cachedResultName": "camps"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "link",
              "condition": "!=",
              "value": "NULL"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "link",
            "sport",
            "status",
            "state",
            "zip",
            "street_address",
            "locality",
            "region",
            "season",
            "tags",
            "add_to_cart",
            "coordinates",
            "class",
            "cost",
            "begins",
            "ends",
            "minAge",
            "maxAge",
            "camp",
            "description",
            "modification_date"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        160,
        -64
      ],
      "id": "3c19cf4b-0143-4d81-8a6c-fa02c8d4ea26",
      "name": "Get current camps from DB",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "OvunvY0RH3fVoKBS",
          "name": "USSC db"
        }
      }
    },
    {
      "parameters": {
        "url": "https://www.ussportscamps.com/sitemap.xml",
        "responseFormat": "string",
        "options": {}
      },
      "name": "Fetch sitemap.xml",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        384,
        -64
      ],
      "id": "ad131601-c726-4fb9-a75b-00cab467192e",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "// This array will hold the output items.\nconst outputItems = [];\n\n// Loop over all input items (usually one item containing the full sitemap XML).\nfor (const item of $input.all()) {\n  const sitemapXmlString = item.json.data;\n  const extractedData = [];\n\n  if (sitemapXmlString && typeof sitemapXmlString === 'string') {\n    const urlBlockRegex = /<url>([\\s\\S]*?)<\\/url>/gs;\n\n    let urlMatch;\n    while ((urlMatch = urlBlockRegex.exec(sitemapXmlString)) !== null) {\n      const urlBlockContent = urlMatch[1];\n\n      const locRegex = /<loc>([^<]+)<\\/loc>/;\n      const locMatch = urlBlockContent.match(locRegex);\n      const link = locMatch ? locMatch[1].trim() : null;\n\n      const lastmodRegex = /<lastmod>([^<]+)<\\/lastmod>/;\n      const lastmodMatch = urlBlockContent.match(lastmodRegex);\n      const modificationDate = lastmodMatch ? lastmodMatch[1].trim() : null;\n\n      if (link) {\n        extractedData.push({\n          link: link,\n          modification_date: modificationDate\n        });\n      }\n    }\n  } else {\n    throw new Error(\"Sitemap content not found or is not a string in item.json.data\");\n  }\n\n  // Теперь мы возвращаем каждую запись как отдельный элемент выходного массива,\n  // чтобы дальше node Google Sheets мог принимать массив объектов.\n  for (const dataItem of extractedData) {\n    outputItems.push({ json: dataItem });\n  }\n}\n\nreturn outputItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        -64
      ],
      "id": "ccafc36a-7c37-4bfa-9323-b15d908399f3",
      "name": "Parse and create JSON with links"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.all().map(item => item.json);\n\nconst baseUrl = \"https://www.ussportscamps.com/\";\n\n// Список допустимых категорий\nconst allowedCategories = [\n  \"baseball\",\n  \"basketball\",\n  \"cross-country\",\n  \"dance\",\n  \"esports\",\n  \"fieldhockey\",\n  \"football\",\n  \"flag-football\",\n  \"golf\",\n  \"gymnastics\",\n  \"kids\",\n  \"lacrosse\",\n  \"multisport\",\n  \"pickleball\",\n  \"rowing\",\n  \"soccer\",\n  \"softball\",\n  \"sport-performance\",\n  \"swim\",\n  \"tennis\",\n  \"track-field\",\n  \"triathlon\",\n  \"volleyball\",\n  \"waterpolo\",\n  \"wrestling\"\n];\n\nconst filteredData = inputData.filter(item => {\n  const link = item.link || \"\";\n\n  // Исключаем нежелательные подстроки\n  if (\n    link.includes(\"https://www.ussportscamps.com/coaches/\") ||\n    link.includes(\"/nbc/\") || link.includes(\"evolve1\") || \nlink.includes(\"https://www.ussportscamps.com/news/\") ||\n    link.includes(\"https://www.ussportscamps.com/tips/\")\n  ) {\n    return false;\n  }\n\n  // Проверяем, что ссылка начинается с baseUrl\n  if (!link.startsWith(baseUrl)) {\n    return false;\n  }\n\n  // Получаем часть URL после baseUrl\n  const pathAfterBase = link.slice(baseUrl.length);\n\n  // Разбиваем путь по слешу и фильтруем пустые части\n  const parts = pathAfterBase.split('/').filter(part => part.length > 0);\n\n  // Проверяем, что есть минимум 2 части: category + page\n  if (parts.length < 2) {\n    return false;\n  }\n\n  const category = parts[0]; // первая часть после baseUrl - категория\n\n  // Проверяем, что категория есть в списке разрешённых\n  if (!allowedCategories.includes(category)) {\n    return false;\n  }\n\n  return true;\n});\n\nreturn filteredData.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        -64
      ],
      "id": "825c869a-677c-4748-b7b7-fe6a207c3774",
      "name": "Filter data"
    },
    {
      "parameters": {
        "jsCode": "const source1 = $input.all().map(item => item.json);\nconst source2 = $('Get current camps from DB').all().map(item => item.json);\n\nfunction normalize(link) {\n  return link ? link.trim().replace(/\\/$/, '').toLowerCase() : '';\n}\n\nconst source1Links = source1.map(item => normalize(item.link));\nconst source2Links = source2.map(item => normalize(item.link));\n\nconst source1Set = new Set(source1Links);\n\nconst diffRecords = source2.filter(item => !source1Set.has(normalize(item.link)));\n\nreturn diffRecords.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        -64
      ],
      "id": "f5ba97dd-caed-4f36-ac87-d9192565d503",
      "name": "Check removed camps"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "camps",
          "mode": "list",
          "cachedResultName": "camps"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "link": "={{ $json.link }}",
            "status": "={{ false }}",
            "google_ads_synced": "={{ false }}",
            "google_ads_feed_url_status": "NULL",
            "google_ads_location_status": "NULL"
          },
          "matchingColumns": [
            "link"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "link",
              "displayName": "link",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sport",
              "displayName": "sport",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "state",
              "displayName": "state",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "zip",
              "displayName": "zip",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "street_address",
              "displayName": "street_address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "locality",
              "displayName": "locality",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "region",
              "displayName": "region",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "season",
              "displayName": "season",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "tags",
              "displayName": "tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "add_to_cart",
              "displayName": "add_to_cart",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "coordinates",
              "displayName": "coordinates",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "class",
              "displayName": "class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "cost",
              "displayName": "cost",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "begins",
              "displayName": "begins",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ends",
              "displayName": "ends",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "minAge",
              "displayName": "minAge",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "maxAge",
              "displayName": "maxAge",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "camp",
              "displayName": "camp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "modification_date",
              "displayName": "modification_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "sport_code",
              "displayName": "sport_code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "google_ads_synced",
              "displayName": "google_ads_synced",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "google_ads_feed_url_status",
              "displayName": "google_ads_feed_url_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "google_ads_location_status",
              "displayName": "google_ads_location_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "additional_companies",
              "displayName": "additional_companies",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "additional_feeds",
              "displayName": "additional_feeds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "overnight",
              "displayName": "overnight",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1248,
        -64
      ],
      "id": "57d30ea8-94ac-4f36-8984-3a61d2b0b066",
      "name": "Save (update) data to DB (removed camps)",
      "credentials": {
        "postgres": {
          "id": "OvunvY0RH3fVoKBS",
          "name": "USSC db"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "40 1 * * *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -64,
        -64
      ],
      "id": "d1f926aa-2c95-41ad-8eda-144e1002a93f",
      "name": "Schedule Trigger"
    }
  ],
  "connections": {
    "Get current camps from DB": {
      "main": [
        [
          {
            "node": "Fetch sitemap.xml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch sitemap.xml": {
      "main": [
        [
          {
            "node": "Parse and create JSON with links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse and create JSON with links": {
      "main": [
        [
          {
            "node": "Filter data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter data": {
      "main": [
        [
          {
            "node": "Check removed camps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check removed camps": {
      "main": [
        [
          {
            "node": "Save (update) data to DB (removed camps)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get current camps from DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": null,
  "pinData": {},
  "versionId": "0876c776-bddc-4fbe-9495-c6ae460854b4",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-28T14:32:00.487Z",
      "updatedAt": "2025-08-28T14:32:00.487Z",
      "role": "workflow:owner",
      "workflowId": "R2BisAA9qDAB0TxV",
      "projectId": "flRKzvtMN6hhu506"
    }
  ],
  "tags": []
}